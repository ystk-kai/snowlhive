name: Release

on:
  workflow_call:
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  push_dockerhub:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/tags/'))

    steps:
    - uses: actions/checkout@v4

    - name: Get the branch or tag name
      run: echo "ref=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Set the Docker tag
      run: echo "tag=$(if [[ "${ref}" == "main" ]]; then echo "latest"; else echo "${ref}"; fi)" >> $GITHUB_ENV

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Determine Dockerfile
      run: echo "DOCKERFILE=./docker/Dockerfile$(if [[ $ref == 'main' || $ref =~ ^v[0-9]+ ]]; then echo '.production'; else echo '.development'; fi)" >> $GITHUB_ENV

    - name: Build the Docker image
      run: docker build . --file $DOCKERFILE --tag ${{ secrets.DOCKERHUB_USERNAME }}/snowlhive:${tag}

    - name: Push the Docker image
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/snowlhive:${tag}

  github_releases:
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'schedule'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: output
        path: ./output

    - name: Get the date
      id: date
      run: echo "date=$(TZ=Asia/Tokyo date +'%Y-%m-%d')" >> $GITHUB_ENV

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        tag_name: ${{ env.date }}
        release_name: Release ${{ env.date }}
        draft: false
        prerelease: false

    - name: Archive directory
      run: zip -r output.zip ./output

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output.zip
        asset_name: output.zip
        asset_content_type: application/zip
